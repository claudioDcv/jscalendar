var data = [
  {
    start : "05/24/2016 00:00:00",
    end : "05/24/2016 01:59:00",
    data : {
      title : "Hola 2"
    }
  },
  {
    start : "05/24/2016 05:00:00",
    end : "05/24/2016 05:29:00",
    data : {
      title : "Hola",
      text : "esto es un texto..."
    }
  },
  {
    start : "05/24/2016 06:00:00",
    end : "05/24/2016 07:29:00",
    data : {
      title : "Hola que tal"
    }
  },
  {
    start : "05/24/2016 08:00:00",
    end : "05/24/2016 08:59:00",
    data : {
      title : "Hola que tal"
    }
  },
  {
    start : "05/24/2016 10:00:00",
    end : "05/24/2016 18:29:00",
    data : {
      title : "Esto es una prueba"
    }
  },
  {
    start : "05/24/2016 20:00:00",
    end : "05/24/2016 21:59:00",
    data : {
      title : "Asi es"
    }
  }
];


var Fecha = Clonador(Date);
Fecha.prototype.imprime = function(){
  return (this.getHours() < 10 ?
            '0' + this.getHours()
            : this.getHours()) + ":" + (this.getMinutes() < 10 ?
              '0' + this.getMinutes()
              : this.getMinutes())
}


var Evento = function(id,start,end,bloques,data){
  this.evento = true;
  this.id = id;
  this.start = start;
  this.end = end;
  this.data = data;
  this.bloques = bloques;
}
var EventoCont = function(id,start,end,bloques,data){
  this.evento = true;
  this.id = id;
  this.start = start;
  this.end = end;
  this.data = data;
  this.bloques = bloques;
}
var Vacio = function(id,bloques,start,end){
  this.evento = false;
  this.id = id;
  this.start = start;
  this.end = end;
  this.bloques = bloques;
}


var Dia = function(data,fechaInicial,opts){
  //Formato 05/24/2016 00:00:00
  var self = this;

  self.errores = [];

  this.DEBUG_MODE = opts.debug_mode;

  this.data = [];

  self.fecha = new Fecha(fechaInicial);

  self.fechaInicial = fechaInicial;

  self.fecha.imprime();
  self.bloqueHorario = [];

  self.bloqueHTML;

  self.BLOQUES_TOTALES = function(){
    return 48;
  }

  this.dia = document.getElementById('dia-calendario');

  this.wrapp = document.createElement('div');
  this.wrapp.id = "dia";

  this.dia.appendChild(this.wrapp);

  this.controladorHTML = new ControladorHTML(this);

  this.setData(data);



  if (this.DEBUG_MODE) {
    console.log(this);
  }

}

Dia.prototype.setData = function(data){
  this.data = data;

  this.crearDiaCompleto();
  this._crearHorarioDelDia();

}

Dia.prototype.crearDiaCompleto = function () {
  //restamos media hora para que en el for se aumente
  //media hora y comience a las 00:00:00
  this.fecha.setMinutes(this.fecha.getMinutes()-30);

  for (var i = 0; i < this.BLOQUES_TOTALES(); i++) {
    this.bloqueHorario.push(this.fecha.setMinutes(this.fecha.getMinutes()+30));
  }
}

Dia.prototype.isVacio = function (start,end) {
  //Si existe algun evento dentro del rango start end
  //retornar false
  //si no existe algun evento retornar true
  //quiere decir que se puede crear un evento
  if (this.DEBUG_MODE) {
    console.log('\nstart:\t'+new Fecha(start),'\nend:\t'+new Fecha(end));
    debugger;
  }

  var self = this;
  var start = new Fecha(start).getTime();
  var end = new Fecha(end).getTime();

  var isVacio = true;
  //for para comprobar los blques
  this.bloqueHorario.forEach(function(bloque){
    var _start = new Fecha(bloque.start).getTime();
    var _end = new Fecha(bloque.end).getTime();

    var v = bloque instanceof Vacio ? 'Vacio':'';
    var v = bloque instanceof Evento ? 'Evento':v;
    var v = bloque instanceof EventoCont ? 'EventoCont':v;

    //comprobar si _start esta dentro de start - end
      if (
        (
          (start <= _start && _start <= end) ||
          (start <= _end && _end <= end)
        ) &&
        (
          v != 'Vacio'
        )
      ) {
        //entra aqui cada vez que encuentra un bloque con Evento
        if (self.DEBUG_MODE) {
          console.log(
                new Fecha(start),
                new Fecha(_start),
                new Fecha(end),
                new Fecha(_end)
              );
        }

        isVacio = false;
      }
      if (self.DEBUG_MODE) {
        console.log(_start,_end);
      }
  });

  if (this.DEBUG_MODE) {
    debugger;
  }
  return isVacio;

}

Dia.prototype.isFechaCorrecta = function (start,end) {
  try{

    if (new Fecha(start).getTime() < new Fecha(end).getTime()) {
      return true;
    }
    return false;
  }
  catch(e){
    return false;
  }
}
Dia.prototype.agregarHorario = function (start,end,data) {

  if (!this.isFechaCorrecta(start,end)) {
    this.errores.push("start no puede ser mayor a end");
    return false;
  }

  var seAgrego = false;
  //Ingresa al bloque si existe algun Evento dentro del bloque
  if (this.isVacio(start,end)) {


    var agregarDesdeEstePunto = this.calculaDesdeInicio(start);

    var evento = new Evento(
      this.id_actual,
      start,
      end,
      this.calcularDiferenciaStartEnd(start,end).bloques,
      data
    );

    this.id_actual++;
    var datos = this.data;

        this.agregarEventoDesdeUnPunto(agregarDesdeEstePunto,evento);

    seAgrego = true;
    if (this.DEBUG_MODE) {
      console.log('OK\testa vacio');

      debugger;
    }
  }else{
    if (this.DEBUG_MODE) {
      this.errores.push("No se puede agregar evento, bloque esta utilizado");
      console.log('NOK\tExiste un evento');
      debugger;
    }
  }

  if (this.DEBUG_MODE) {
    console.log(this.errores);;
  }

  return seAgrego;
}

Dia.prototype.agregarEventoDesdeUnPunto = function (punto,evento) {
  var desde = punto;
  var hasta = punto + evento.bloques;
  for (var i = punto; i < hasta; i++) {
    //var bloqueVacio = this.bloqueHorario[i];
    if (desde == i) {
      this.bloqueHorario[i] = evento;
      var a = 1;
    }else{

      this.bloqueHorario[i] = new EventoCont(
        evento.id_actual,
        evento.start,
        evento.end,
        evento.bloques,
        evento.data
      );
    }

  }
  var e = this;
  this.crearHTML();
}

Dia.prototype.decimalToHours = function (numero) {
  var sign = numero < 0 ?  '-':'';
  var min = Math.floor(Math.abs(numero));
  var sec = Math.floor((Math.abs(numero) * 60) % 60);
  var stringDeRetorno = sign + (min < 10 ? 0 : "")
                             + min + ':'
                             + (sec < 10 ? '0' + sec : sec);

  var numeroDeBoques = (min > 0 ? min * 2 : 0) + (sec == 30 ? 1 : 0);

  return {
    bloques : numeroDeBoques,
    text : stringDeRetorno
  };
}


Dia.prototype.calculaDesdeInicio = function (start) {

  this.fecha = new Fecha(this.fechaInicial);

  //this.fecha.setDate(this.fecha.getDate()-1);

  //this.fecha.setMinutes(this.fecha.getMinutes()-30);

  var bloquesDesdeInicio = 0;

  for (var i = 0; i < this.BLOQUES_TOTALES(); i++) {
    this.fecha.setMinutes(this.fecha.getMinutes()+30);

    //console.log(new Fecha(start) , new Fecha(this.fecha));
    //console.log(new Fecha(start).getTime() , new Fecha(this.fecha).getTime());

    if (new Fecha(start).getTime() == new Fecha(this.fecha).getTime()) {
      bloquesDesdeInicio = i+1;
      break;
    }

  }
  return bloquesDesdeInicio;
}

Dia.prototype.calcularDiferenciaStartEnd = function (start,end) {



  var obj = this.decimalToHours((
    (new Fecha(end).getTime()+100000) - (new Fecha(start).getTime())
  )/3600000);

  return obj;
}

Dia.prototype.agregarNuevo = function (evento) {

  for (var i = 0; i < this.BLOQUES_TOTALES(); i++) {
    var a = this.bloqueHorario[i];
    var evt = evento;

      if ( (new Fecha(evt.end)).getTime() === a) {

        var evento = new EventoCont(
                            this.id_actual,
                            evt.start,
                            evt.end,
                            this.calcularDiferenciaStartEnd(
                              evt.start,evt.end
                            ).bloques,
                            evt.data
                          );
          this.bloqueHorario[i] = evento;

      }else
      if ( (new Fecha(evt.end)).getTime() > a && (new Fecha(evt.start)).getTime() < a) {

        var evento = new EventoCont(
                            this.id_actual,
                            evt.start,
                            evt.end,
                            this.calcularDiferenciaStartEnd(evt.start,evt.end).bloques,
                            evt.data
                          );
          this.bloqueHorario[i] = evento;

      }else
      if ( (new Fecha(evt.start)).getTime() === a) {


          var evento = new Evento(
                              this.id_actual,
                              evt.start,
                              evt.end,
                              this.calcularDiferenciaStartEnd(evt.start,evt.end).bloques,
                              evt.data
                            );
          this.bloqueHorario[i] = evento;
          this.id_actual++;

      }

  }


  console.log(this.bloqueHorario);
  //this.crearHTML();
}



Dia.prototype._crearHorarioDelDia = function () {

  for (var i = 0; i < this.BLOQUES_TOTALES(); i++) {
    var a = this.bloqueHorario[i];

    this.bloqueHorario[i] = new Vacio(
                          i,
                          1,
                          this.bloqueHorario[i],
                          (new Fecha(this.bloqueHorario[i])
                            .setMinutes(new Fecha(this.bloqueHorario[i])
                              .getMinutes()+29)));

    for (var j = 0; j < this.data.length; j++) {
      var evt = this.data[j];

      if ( (new Fecha(evt.end)).getTime() === a) {

        var evento = new EventoCont(
                            j,
                            evt.start,
                            evt.end,
                            this.calcularDiferenciaStartEnd(evt.start,evt.end).bloques,
                            evt.data
                          );
          this.bloqueHorario[i] = evento;

      }else
      if ( (new Fecha(evt.end)).getTime() > a && (new Fecha(evt.start)).getTime() < a) {

        var evento = new EventoCont(
                            j,
                            evt.start,
                            evt.end,
                            this.calcularDiferenciaStartEnd(evt.start,evt.end).bloques,
                            evt.data
                          );
          this.bloqueHorario[i] = evento;

      }else
      if ( (new Fecha(evt.start)).getTime() === a) {

          this.id_actual = j;
          var evento = new Evento(
                              j,
                              evt.start,
                              evt.end,
                              this.calcularDiferenciaStartEnd(evt.start,evt.end).bloques,
                              evt.data
                            );
          this.bloqueHorario[i] = evento;

      }
    }
  }

  this.crearHTML();
}

Dia.prototype.crearHTML = function () {

  this.wrapp.innerHTML = "";

  var arregloBLoque = [];
  var sumaPorcentajes = 0;
  var i = 0;

  for ( i ; i < this.BLOQUES_TOTALES();) {
    var bloque = document.createElement("div");
    var objeto = this.bloqueHorario[i];



    var a = this.bloqueHorario[i].bloques;
        bloque.dataset.bloque = a;

        sumaPorcentajes += a;

        if (typeof a !== 'undefined') {

            bloque.style.height = (a*100)/48 + '%';

              var hora = document.createElement('p');

              if(objeto.evento){
                var hora_txt = document.createTextNode(
                                (new Fecha(objeto.start)).imprime()
                                + ' - '
                                + (new Fecha(objeto.end)).imprime()
                                + ' '
                                + objeto.data.title);
                hora.appendChild(hora_txt);
                bloque.appendChild(hora);
                bloque.dataset.start = objeto.start;
                bloque.className = "evento";
                i += a;

              }else{
                var hora_txt = document.createTextNode((new Fecha(objeto.start)).imprime());
                hora.appendChild(hora_txt);
                bloque.appendChild(hora);

                bloque.className = "vacio";
                i++;
              }

            this.wrapp.appendChild(bloque);
            arregloBLoque.push(a);
        }


  }


  if (this.DEBUG_MODE) {
    console.log(sumaPorcentajes,arregloBLoque);
    console.log(wrapp);
    console.log(arregloBLoque);
  }

}


var ControladorHTML = function(dia){

  this.dia = dia;

  this.contenedor = document.createElement('div');
  //this.title = document.createTextNode('Claudio heramientas');
  //this.contenedor.appendChild(this.title);
  dia.dia.appendChild(this.contenedor);

  this.vetanaNuevoEvento();
}
ControladorHTML.prototype.vetanaNuevoEvento = function (arguments) {
  var openBtn = document.createElement('button');
      openBtn.appendChild(document.createTextNode('Agregar Evento'));

  var head = document.createElement('div');
      head.appendChild(document.createTextNode('Agregar Evento'));
      head.className = 'dia dia-nuevo-evento-head  dia-defecto-head';
  var body = document.createElement('div');
      body.className = 'dia dia-nuevo-evento-body dia-defecto-body';


      var msg = document.createElement('input');

      var title = document.createElement('input');
      var inicio = document.createElement('input');
      var termino = document.createElement('input');

          inicio.className = "fecha";
          termino.className = "fecha";
          title.className = "title";
          msg.className = "mensaje";
          msg.readOnly = true;

          title.value = "Una actividad creada desde afuera";
          inicio.value = "09:00";
          termino.value = "09:59";

          body.appendChild(msg);
          body.appendChild(title);
          body.appendChild(inicio);
          body.appendChild(termino);

  var footer = document.createElement('div');
      footer.className = 'dia dia-nuevo-evento-footer  dia-defecto-footer';
  var ventana = document.createElement('div');
      ventana.className = 'dia dia-nuevo-evento-ventana dia-defecto-ventana';

      var ok = document.createElement('button');
          ok.appendChild(document.createTextNode('Aceptar'));
          ok.className = 'dia-btn-ok';

      var nok = document.createElement('button');
          nok.appendChild(document.createTextNode('Cancelar'));
          nok.className = 'dia-btn-nok';


          footer.appendChild(ok);
          footer.appendChild(nok);

  var container = document.createElement('div');
      container.className = 'dia-hide dia dia-nuevo-evento-container dia-defecto-container';

  ventana.appendChild(head);
  ventana.appendChild(body);
  ventana.appendChild(footer);

  container.appendChild(ventana);



  //BOTONES
  function fn_add(){

    var fecha = this.dia.fecha;

    var anio = fecha.getFullYear();
    var dia = fecha.getDate();
    var mes = fecha.getMonth() < 9 ? "0"+(fecha.getMonth()+1):fecha.getMonth()+1;

    var fullAnio = mes +"/"+ dia +"/"+ anio;

    var i = fullAnio + " " + inicio.value + ":00";
    var t = fullAnio + " " + termino.value + ":00";
    var control = this.dia.agregarHorario(i,t,{title : title.value});

    if (control) {
      container.className = 'dia-hide dia dia-nuevo-evento-container dia-defecto-container';
    }else{
      msg.value = "No se puede crear evento";
    }

  }



  function fn_close(){
    msg.value = "";
    container.className = 'dia-hide dia dia-nuevo-evento-container dia-defecto-container';
  }

  function fn_open(){
    container.className = 'dia-show dia dia-nuevo-evento-container dia-defecto-container';
  }


  function inicio_change(){
    mask(inicio, '00:00', event);
  }
  //inicio.addEventListener('change',inicio_change.bind(this),false);
  //inicio.addEventListener('paste',inicio_change.bind(this),false);
  inicio.addEventListener('keyup',inicio_change.bind(this),false);

  function termino_change(){
    //mask(termino, '00/00/0000 00:00:00', event);
    mask(termino, '00:00', event);
  }
  //termino.addEventListener('change',termino_change.bind(this),false);
  //termino.addEventListener('paste',termino_change.bind(this),false);
  termino.addEventListener('keyup',termino_change.bind(this),false);

  openBtn.addEventListener('click',fn_open.bind(this),false);
  ok.addEventListener('click',fn_add.bind(this),false);
  nok.addEventListener('click',fn_close.bind(this),false);


  this.contenedor.appendChild(container)
  this.contenedor.appendChild(openBtn);
}




var dia = new Dia(data,"05/24/2016 00:00:00",{debug_mode : false});

    //
    // <html>
    // <head>
    // <script type="text/javascript">
      function mask(elm, mask, evt) {
        try {
          var text = elm;
          var value = text.value;

          // If user pressed DEL or BACK SPACE, clean the value
          try {
            var e = (evt.which) ? evt.which : event.keyCode;
            if ( e == 46 || e == 8 ) {
              text.value = "";
              return;
            }
          } catch (e1) {}

          var literalPattern=/[0\*]/;
          var numberPattern=/[0-9]/;
          var newValue = "";

          for (var vId = 0, mId = 0 ; mId < mask.length ; ) {
            if (mId >= value.length)
              break;

            // Number expected but got a different value, store only the valid portion
            if (mask[mId] == '0' && value[vId].match(numberPattern) == null) {
              break;
            }

            // Found a literal
            while (mask[mId].match(literalPattern) == null) {
              if (value[vId] == mask[mId])
                break;

            newValue += mask[mId++];
          }

          newValue += value[vId++];
          mId++;
        }

        text.value = newValue;
      } catch(e) {}
    }
    // </script>
    // </head>
    // <body>
    // <form id="form1">
    // <input type="text" id="zipCode" onkeyup="javascript:mask('zipCode', '00000-0000', event);" value="12345-6789" >
    // </form>
    // </html>
